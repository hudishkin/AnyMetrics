//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 11 colors.
  struct color {
    /// Color `addMetricTint`.
    static let addMetricTint = Rswift.ColorResource(bundle: R.hostingBundle, name: "addMetricTint")
    /// Color `baseText`.
    static let baseText = Rswift.ColorResource(bundle: R.hostingBundle, name: "baseText")
    /// Color `galleryItemBackground`.
    static let galleryItemBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "galleryItemBackground")
    /// Color `metricBad`.
    static let metricBad = Rswift.ColorResource(bundle: R.hostingBundle, name: "metricBad")
    /// Color `metricDefault`.
    static let metricDefault = Rswift.ColorResource(bundle: R.hostingBundle, name: "metricDefault")
    /// Color `metricGood`.
    static let metricGood = Rswift.ColorResource(bundle: R.hostingBundle, name: "metricGood")
    /// Color `metricParamBackground`.
    static let metricParamBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "metricParamBackground")
    /// Color `metricStrockColor`.
    static let metricStrockColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "metricStrockColor")
    /// Color `metricText`.
    static let metricText = Rswift.ColorResource(bundle: R.hostingBundle, name: "metricText")
    /// Color `red`.
    static let red = Rswift.ColorResource(bundle: R.hostingBundle, name: "red")
    /// Color `secondaryText`.
    static let secondaryText = Rswift.ColorResource(bundle: R.hostingBundle, name: "secondaryText")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "addMetricTint", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func addMetricTint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.addMetricTint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "baseText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func baseText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.baseText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "galleryItemBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func galleryItemBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.galleryItemBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "metricBad", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func metricBad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.metricBad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "metricDefault", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func metricDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.metricDefault, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "metricGood", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func metricGood(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.metricGood, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "metricParamBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func metricParamBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.metricParamBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "metricStrockColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func metricStrockColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.metricStrockColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "metricText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func metricText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.metricText, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func red(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.red, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "secondaryText", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondaryText(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondaryText, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "addMetricTint", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func addMetricTint(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.addMetricTint.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "baseText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func baseText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.baseText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "galleryItemBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func galleryItemBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.galleryItemBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "metricBad", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func metricBad(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.metricBad.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "metricDefault", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func metricDefault(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.metricDefault.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "metricGood", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func metricGood(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.metricGood.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "metricParamBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func metricParamBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.metricParamBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "metricStrockColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func metricStrockColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.metricStrockColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "metricText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func metricText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.metricText.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "red", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func red(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.red.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "secondaryText", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondaryText(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondaryText.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 1 properties.
  struct entitlements {
    struct comAppleSecurityApplicationGroups {
      static let groupAnymetricsApp = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.anymetrics.app") ?? "group.anymetrics.app"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 3 images.
  struct image {
    /// Image `minus`.
    static let minus = Rswift.ImageResource(bundle: R.hostingBundle, name: "minus")
    /// Image `plus`.
    static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "plus")
    /// Image `request`.
    static let request = Rswift.ImageResource(bundle: R.hostingBundle, name: "request")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "minus", bundle: ..., traitCollection: ...)`
    static func minus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "plus", bundle: ..., traitCollection: ...)`
    static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.plus, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "request", bundle: ..., traitCollection: ...)`
    static func request(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.request, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct nsUserActivityTypes {
      static let configurationIntent = infoPlistString(path: ["NSUserActivityTypes"], key: "ConfigurationIntent") ?? "ConfigurationIntent"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 52 localization keys.
    struct localizable {
      /// en translation: Add
      ///
      /// Locales: en, ru
      static let httpheadersAddButton = Rswift.StringResource(key: "httpheaders.add.button", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add
      ///
      /// Locales: en, ru
      static let metricAdd = Rswift.StringResource(key: "metric.add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add Header
      ///
      /// Locales: en, ru
      static let httpheadersAddTitle = Rswift.StringResource(key: "httpheaders.add.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add Metric
      ///
      /// Locales: en, ru
      static let metricAddTitle = Rswift.StringResource(key: "metric.add.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add header
      ///
      /// Locales: en, ru
      static let addmetricAddHeader = Rswift.StringResource(key: "addmetric.add-header", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Add metric
      ///
      /// Locales: en, ru
      static let addmetricAdd = Rswift.StringResource(key: "addmetric.add", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: AnyMetrics
      ///
      /// Locales: en, ru
      static let appName = Rswift.StringResource(key: "appName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Author
      ///
      /// Locales: en, ru
      static let addmetricDetailAuthor = Rswift.StringResource(key: "addmetric.detail.author", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Bad
      ///
      /// Locales: en, ru
      static let metricValueBad = Rswift.StringResource(key: "metric.value.bad", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Bitcoin
      ///
      /// Locales: en, ru
      static let addmetricMetricTitleExample = Rswift.StringResource(key: "addmetric.metric-title-example", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Check status
      ///
      /// Locales: en, ru
      static let addmetricTypeMetricChecker = Rswift.StringResource(key: "addmetric.type-metric-checker", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Create custom metric
      ///
      /// Locales: en, ru
      static let metricAddCustom = Rswift.StringResource(key: "metric.add.custom", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Currency
      ///
      /// Locales: en, ru
      static let addmetricFormatTypeCurrency = Rswift.StringResource(key: "addmetric.format-type-currency", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Description
      ///
      /// Locales: en, ru
      static let addmetricTitleParamMetric = Rswift.StringResource(key: "addmetric.title-param-metric", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Details
      ///
      /// Locales: en, ru
      static let addmetricDetails = Rswift.StringResource(key: "addmetric.details", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Empty response
      ///
      /// Locales: en, ru
      static let addmetricEmptyResponse = Rswift.StringResource(key: "addmetric.empty-response", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Enter URL
      ///
      /// Locales: en, ru
      static let addmetricPlaceholderJsonUrl = Rswift.StringResource(key: "addmetric.placeholder-json-url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Enter request URL
      ///
      /// Locales: en, ru
      static let addmetricRequestUrl = Rswift.StringResource(key: "addmetric.request-url", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Format
      ///
      /// Locales: en, ru
      static let addmetricMetricValueFormat = Rswift.StringResource(key: "addmetric.metric-value-format", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Good
      ///
      /// Locales: en, ru
      static let metricValueGood = Rswift.StringResource(key: "metric.value.good", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: HTTP Method
      ///
      /// Locales: en, ru
      static let addmetricHttpMethod = Rswift.StringResource(key: "addmetric.http-method", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: HTTP headers
      ///
      /// Locales: en, ru
      static let addmetricHttpHeaders = Rswift.StringResource(key: "addmetric.http-headers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: HTTP-header title
      ///
      /// Locales: en, ru
      static let httpheadersEnterName = Rswift.StringResource(key: "httpheaders.enter-name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Header Value
      ///
      /// Locales: en, ru
      static let httpheadersEnterValue = Rswift.StringResource(key: "httpheaders.enter-value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: How use «Parsing rule»?
      ///
      /// Locales: en, ru
      static let addmetricFaqRule = Rswift.StringResource(key: "addmetric.faq-rule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Invalid rule
      ///
      /// Locales: en, ru
      static let addmetricErrorInvalidRule = Rswift.StringResource(key: "addmetric.error.invalid-rule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: JSON
      ///
      /// Locales: en, ru
      static let addmetricAddTypeFromjson = Rswift.StringResource(key: "addmetric.add-type-fromjson", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: JSON
      ///
      /// Locales: en, ru
      static let addmetricTypeMetricJson = Rswift.StringResource(key: "addmetric.type-metric-json", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Length - %@
      ///
      /// Locales: en, ru
      static let addmetricMaxlength = Rswift.StringResource(key: "addmetric.maxlength", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Load JSON file
      ///
      /// Locales: en, ru
      static let addmetricLoadFile = Rswift.StringResource(key: "addmetric.load-file", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Make request
      ///
      /// Locales: en, ru
      static let addmetricMakeRequest = Rswift.StringResource(key: "addmetric.make-request", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Manual
      ///
      /// Locales: en, ru
      static let addmetricAddTypeManual = Rswift.StringResource(key: "addmetric.add-type-manual", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: New metric
      ///
      /// Locales: en, ru
      static let addmetricNewTitle = Rswift.StringResource(key: "addmetric.new.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Optional
      ///
      /// Locales: en, ru
      static let commonOptional = Rswift.StringResource(key: "common.optional", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Parse HTML
      ///
      /// Locales: en, ru
      static let addmetricTypeMetricWeb = Rswift.StringResource(key: "addmetric.type-metric-web", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Parsing rule
      ///
      /// Locales: en, ru
      static let addmetricParseRule = Rswift.StringResource(key: "addmetric.parse-rule", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Press + and add your first metric
      ///
      /// Locales: en, ru
      static let metricPlaceholder = Rswift.StringResource(key: "metric.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Price, USD
      ///
      /// Locales: en, ru
      static let addmetricTitleParamExample = Rswift.StringResource(key: "addmetric.title-param-example", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Raw data
      ///
      /// Locales: en, ru
      static let addmetricFormatTypeNone = Rswift.StringResource(key: "addmetric.format-type-none", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Refresh metric
      ///
      /// Locales: en, ru
      static let metricActionsUpdateValue = Rswift.StringResource(key: "metric.actions.update-value", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Remove
      ///
      /// Locales: en, ru
      static let metricActionsDelete = Rswift.StringResource(key: "metric.actions.delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select HTTP Header
      ///
      /// Locales: en, ru
      static let httpheadersSelectTitle = Rswift.StringResource(key: "httpheaders.select.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select action
      ///
      /// Locales: en, ru
      static let metricActionsTitle = Rswift.StringResource(key: "metric.actions.title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select from HTTP-header list
      ///
      /// Locales: en, ru
      static let httpheadersSelectFromList = Rswift.StringResource(key: "httpheaders.select-from-list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select from examples
      ///
      /// Locales: en, ru
      static let httpheadersSelectValuesFromList = Rswift.StringResource(key: "httpheaders.select-values-from-list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Select type
      ///
      /// Locales: en, ru
      static let addmetricSelectType = Rswift.StringResource(key: "addmetric.select-type", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Settings value
      ///
      /// Locales: en, ru
      static let addmetricValueTitle = Rswift.StringResource(key: "addmetric.value-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Site
      ///
      /// Locales: en, ru
      static let addmetricDetailSite = Rswift.StringResource(key: "addmetric.detail.site", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: This HTTP-header and value will be send in every request for get metric value.
      ///
      /// Locales: en, ru
      static let httpheadersValueInformation = Rswift.StringResource(key: "httpheaders.value-information", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Title
      ///
      /// Locales: en, ru
      static let addmetricMetricTitle = Rswift.StringResource(key: "addmetric.metric-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Value: %@
      ///
      /// Locales: en, ru
      static let addmetricValueDisplay = Rswift.StringResource(key: "addmetric.value-display", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)
      /// en translation: Without limit
      ///
      /// Locales: en, ru
      static let addmetricNoLimitLength = Rswift.StringResource(key: "addmetric.no-limit-length", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ru"], comment: nil)

      /// en translation: Add
      ///
      /// Locales: en, ru
      static func httpheadersAddButton(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("httpheaders.add.button", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "httpheaders.add.button"
        }

        return NSLocalizedString("httpheaders.add.button", bundle: bundle, comment: "")
      }

      /// en translation: Add
      ///
      /// Locales: en, ru
      static func metricAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("metric.add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "metric.add"
        }

        return NSLocalizedString("metric.add", bundle: bundle, comment: "")
      }

      /// en translation: Add Header
      ///
      /// Locales: en, ru
      static func httpheadersAddTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("httpheaders.add.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "httpheaders.add.title"
        }

        return NSLocalizedString("httpheaders.add.title", bundle: bundle, comment: "")
      }

      /// en translation: Add Metric
      ///
      /// Locales: en, ru
      static func metricAddTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("metric.add.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "metric.add.title"
        }

        return NSLocalizedString("metric.add.title", bundle: bundle, comment: "")
      }

      /// en translation: Add header
      ///
      /// Locales: en, ru
      static func addmetricAddHeader(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.add-header", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.add-header"
        }

        return NSLocalizedString("addmetric.add-header", bundle: bundle, comment: "")
      }

      /// en translation: Add metric
      ///
      /// Locales: en, ru
      static func addmetricAdd(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.add", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.add"
        }

        return NSLocalizedString("addmetric.add", bundle: bundle, comment: "")
      }

      /// en translation: AnyMetrics
      ///
      /// Locales: en, ru
      static func appName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("appName", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "appName"
        }

        return NSLocalizedString("appName", bundle: bundle, comment: "")
      }

      /// en translation: Author
      ///
      /// Locales: en, ru
      static func addmetricDetailAuthor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.detail.author", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.detail.author"
        }

        return NSLocalizedString("addmetric.detail.author", bundle: bundle, comment: "")
      }

      /// en translation: Bad
      ///
      /// Locales: en, ru
      static func metricValueBad(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("metric.value.bad", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "metric.value.bad"
        }

        return NSLocalizedString("metric.value.bad", bundle: bundle, comment: "")
      }

      /// en translation: Bitcoin
      ///
      /// Locales: en, ru
      static func addmetricMetricTitleExample(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.metric-title-example", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.metric-title-example"
        }

        return NSLocalizedString("addmetric.metric-title-example", bundle: bundle, comment: "")
      }

      /// en translation: Check status
      ///
      /// Locales: en, ru
      static func addmetricTypeMetricChecker(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.type-metric-checker", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.type-metric-checker"
        }

        return NSLocalizedString("addmetric.type-metric-checker", bundle: bundle, comment: "")
      }

      /// en translation: Create custom metric
      ///
      /// Locales: en, ru
      static func metricAddCustom(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("metric.add.custom", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "metric.add.custom"
        }

        return NSLocalizedString("metric.add.custom", bundle: bundle, comment: "")
      }

      /// en translation: Currency
      ///
      /// Locales: en, ru
      static func addmetricFormatTypeCurrency(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.format-type-currency", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.format-type-currency"
        }

        return NSLocalizedString("addmetric.format-type-currency", bundle: bundle, comment: "")
      }

      /// en translation: Description
      ///
      /// Locales: en, ru
      static func addmetricTitleParamMetric(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.title-param-metric", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.title-param-metric"
        }

        return NSLocalizedString("addmetric.title-param-metric", bundle: bundle, comment: "")
      }

      /// en translation: Details
      ///
      /// Locales: en, ru
      static func addmetricDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.details"
        }

        return NSLocalizedString("addmetric.details", bundle: bundle, comment: "")
      }

      /// en translation: Empty response
      ///
      /// Locales: en, ru
      static func addmetricEmptyResponse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.empty-response", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.empty-response"
        }

        return NSLocalizedString("addmetric.empty-response", bundle: bundle, comment: "")
      }

      /// en translation: Enter URL
      ///
      /// Locales: en, ru
      static func addmetricPlaceholderJsonUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.placeholder-json-url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.placeholder-json-url"
        }

        return NSLocalizedString("addmetric.placeholder-json-url", bundle: bundle, comment: "")
      }

      /// en translation: Enter request URL
      ///
      /// Locales: en, ru
      static func addmetricRequestUrl(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.request-url", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.request-url"
        }

        return NSLocalizedString("addmetric.request-url", bundle: bundle, comment: "")
      }

      /// en translation: Format
      ///
      /// Locales: en, ru
      static func addmetricMetricValueFormat(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.metric-value-format", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.metric-value-format"
        }

        return NSLocalizedString("addmetric.metric-value-format", bundle: bundle, comment: "")
      }

      /// en translation: Good
      ///
      /// Locales: en, ru
      static func metricValueGood(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("metric.value.good", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "metric.value.good"
        }

        return NSLocalizedString("metric.value.good", bundle: bundle, comment: "")
      }

      /// en translation: HTTP Method
      ///
      /// Locales: en, ru
      static func addmetricHttpMethod(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.http-method", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.http-method"
        }

        return NSLocalizedString("addmetric.http-method", bundle: bundle, comment: "")
      }

      /// en translation: HTTP headers
      ///
      /// Locales: en, ru
      static func addmetricHttpHeaders(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.http-headers", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.http-headers"
        }

        return NSLocalizedString("addmetric.http-headers", bundle: bundle, comment: "")
      }

      /// en translation: HTTP-header title
      ///
      /// Locales: en, ru
      static func httpheadersEnterName(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("httpheaders.enter-name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "httpheaders.enter-name"
        }

        return NSLocalizedString("httpheaders.enter-name", bundle: bundle, comment: "")
      }

      /// en translation: Header Value
      ///
      /// Locales: en, ru
      static func httpheadersEnterValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("httpheaders.enter-value", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "httpheaders.enter-value"
        }

        return NSLocalizedString("httpheaders.enter-value", bundle: bundle, comment: "")
      }

      /// en translation: How use «Parsing rule»?
      ///
      /// Locales: en, ru
      static func addmetricFaqRule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.faq-rule", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.faq-rule"
        }

        return NSLocalizedString("addmetric.faq-rule", bundle: bundle, comment: "")
      }

      /// en translation: Invalid rule
      ///
      /// Locales: en, ru
      static func addmetricErrorInvalidRule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.error.invalid-rule", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.error.invalid-rule"
        }

        return NSLocalizedString("addmetric.error.invalid-rule", bundle: bundle, comment: "")
      }

      /// en translation: JSON
      ///
      /// Locales: en, ru
      static func addmetricAddTypeFromjson(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.add-type-fromjson", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.add-type-fromjson"
        }

        return NSLocalizedString("addmetric.add-type-fromjson", bundle: bundle, comment: "")
      }

      /// en translation: JSON
      ///
      /// Locales: en, ru
      static func addmetricTypeMetricJson(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.type-metric-json", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.type-metric-json"
        }

        return NSLocalizedString("addmetric.type-metric-json", bundle: bundle, comment: "")
      }

      /// en translation: Length - %@
      ///
      /// Locales: en, ru
      static func addmetricMaxlength(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("addmetric.maxlength", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.maxlength"
        }

        let format = NSLocalizedString("addmetric.maxlength", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Load JSON file
      ///
      /// Locales: en, ru
      static func addmetricLoadFile(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.load-file", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.load-file"
        }

        return NSLocalizedString("addmetric.load-file", bundle: bundle, comment: "")
      }

      /// en translation: Make request
      ///
      /// Locales: en, ru
      static func addmetricMakeRequest(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.make-request", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.make-request"
        }

        return NSLocalizedString("addmetric.make-request", bundle: bundle, comment: "")
      }

      /// en translation: Manual
      ///
      /// Locales: en, ru
      static func addmetricAddTypeManual(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.add-type-manual", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.add-type-manual"
        }

        return NSLocalizedString("addmetric.add-type-manual", bundle: bundle, comment: "")
      }

      /// en translation: New metric
      ///
      /// Locales: en, ru
      static func addmetricNewTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.new.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.new.title"
        }

        return NSLocalizedString("addmetric.new.title", bundle: bundle, comment: "")
      }

      /// en translation: Optional
      ///
      /// Locales: en, ru
      static func commonOptional(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("common.optional", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "common.optional"
        }

        return NSLocalizedString("common.optional", bundle: bundle, comment: "")
      }

      /// en translation: Parse HTML
      ///
      /// Locales: en, ru
      static func addmetricTypeMetricWeb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.type-metric-web", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.type-metric-web"
        }

        return NSLocalizedString("addmetric.type-metric-web", bundle: bundle, comment: "")
      }

      /// en translation: Parsing rule
      ///
      /// Locales: en, ru
      static func addmetricParseRule(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.parse-rule", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.parse-rule"
        }

        return NSLocalizedString("addmetric.parse-rule", bundle: bundle, comment: "")
      }

      /// en translation: Press + and add your first metric
      ///
      /// Locales: en, ru
      static func metricPlaceholder(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("metric.placeholder", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "metric.placeholder"
        }

        return NSLocalizedString("metric.placeholder", bundle: bundle, comment: "")
      }

      /// en translation: Price, USD
      ///
      /// Locales: en, ru
      static func addmetricTitleParamExample(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.title-param-example", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.title-param-example"
        }

        return NSLocalizedString("addmetric.title-param-example", bundle: bundle, comment: "")
      }

      /// en translation: Raw data
      ///
      /// Locales: en, ru
      static func addmetricFormatTypeNone(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.format-type-none", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.format-type-none"
        }

        return NSLocalizedString("addmetric.format-type-none", bundle: bundle, comment: "")
      }

      /// en translation: Refresh metric
      ///
      /// Locales: en, ru
      static func metricActionsUpdateValue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("metric.actions.update-value", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "metric.actions.update-value"
        }

        return NSLocalizedString("metric.actions.update-value", bundle: bundle, comment: "")
      }

      /// en translation: Remove
      ///
      /// Locales: en, ru
      static func metricActionsDelete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("metric.actions.delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "metric.actions.delete"
        }

        return NSLocalizedString("metric.actions.delete", bundle: bundle, comment: "")
      }

      /// en translation: Select HTTP Header
      ///
      /// Locales: en, ru
      static func httpheadersSelectTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("httpheaders.select.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "httpheaders.select.title"
        }

        return NSLocalizedString("httpheaders.select.title", bundle: bundle, comment: "")
      }

      /// en translation: Select action
      ///
      /// Locales: en, ru
      static func metricActionsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("metric.actions.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "metric.actions.title"
        }

        return NSLocalizedString("metric.actions.title", bundle: bundle, comment: "")
      }

      /// en translation: Select from HTTP-header list
      ///
      /// Locales: en, ru
      static func httpheadersSelectFromList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("httpheaders.select-from-list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "httpheaders.select-from-list"
        }

        return NSLocalizedString("httpheaders.select-from-list", bundle: bundle, comment: "")
      }

      /// en translation: Select from examples
      ///
      /// Locales: en, ru
      static func httpheadersSelectValuesFromList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("httpheaders.select-values-from-list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "httpheaders.select-values-from-list"
        }

        return NSLocalizedString("httpheaders.select-values-from-list", bundle: bundle, comment: "")
      }

      /// en translation: Select type
      ///
      /// Locales: en, ru
      static func addmetricSelectType(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.select-type", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.select-type"
        }

        return NSLocalizedString("addmetric.select-type", bundle: bundle, comment: "")
      }

      /// en translation: Settings value
      ///
      /// Locales: en, ru
      static func addmetricValueTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.value-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.value-title"
        }

        return NSLocalizedString("addmetric.value-title", bundle: bundle, comment: "")
      }

      /// en translation: Site
      ///
      /// Locales: en, ru
      static func addmetricDetailSite(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.detail.site", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.detail.site"
        }

        return NSLocalizedString("addmetric.detail.site", bundle: bundle, comment: "")
      }

      /// en translation: This HTTP-header and value will be send in every request for get metric value.
      ///
      /// Locales: en, ru
      static func httpheadersValueInformation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("httpheaders.value-information", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "httpheaders.value-information"
        }

        return NSLocalizedString("httpheaders.value-information", bundle: bundle, comment: "")
      }

      /// en translation: Title
      ///
      /// Locales: en, ru
      static func addmetricMetricTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.metric-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.metric-title"
        }

        return NSLocalizedString("addmetric.metric-title", bundle: bundle, comment: "")
      }

      /// en translation: Value: %@
      ///
      /// Locales: en, ru
      static func addmetricValueDisplay(_ value1: String, preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          let format = NSLocalizedString("addmetric.value-display", bundle: hostingBundle, comment: "")
          return String(format: format, locale: applicationLocale, value1)
        }

        guard let (locale, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.value-display"
        }

        let format = NSLocalizedString("addmetric.value-display", bundle: bundle, comment: "")
        return String(format: format, locale: locale, value1)
      }

      /// en translation: Without limit
      ///
      /// Locales: en, ru
      static func addmetricNoLimitLength(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("addmetric.no-limit-length", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "addmetric.no-limit-length"
        }

        return NSLocalizedString("addmetric.no-limit-length", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  fileprivate init() {}
}
